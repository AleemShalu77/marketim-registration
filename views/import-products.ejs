<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Template Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="../public/style/import-products.css" />
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />
  </head>
  <body class="min-h-screen flex flex-col items-center p-6">
    <div class="topbar-container">
      <h2 class="topbar-title">Select Products for Your Template</h2>
      <div class="topbar-controls">
        <div class="control-group">
          <label for="templateSelect" class="control-label"
            >Select Template:</label
          >
          <select
            id="templateSelect"
            class="control-select"
            onchange="updateGridLayoutOptions()"
          >
            <option value="1">1 Product</option>
            <option value="2">2 Products</option>
            <option value="4">4 Products</option>
            <option value="9">9 Products</option>
          </select>
        </div>
        <div class="control-group">
          <label for="gridLayoutSelect" class="control-label"
            >Grid Layout:</label
          >
          <select
            id="gridLayoutSelect"
            class="control-select"
            onchange="updateGridLayout()"
          >
            <!-- Options will be populated dynamically -->
          </select>
        </div>
        <div class="color-picker-container">
          <label for="backgroundColorPicker" class="color-picker-label"
            >Background Color:</label
          >
          <input
            type="color"
            id="backgroundColorPicker"
            value="#e0f7fa"
            onchange="updateBackgroundColor()"
          />
        </div>
      </div>
    </div>

    <div id="templateGridContainer">
      <div id="templateGrid"></div>
    </div>

    <button onclick="saveTemplate()" class="download-btn">Save Template</button>

    <!-- Edit Product Modal -->
    <div
      id="editModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50"
    >
      <div
        class="bg-white rounded-lg max-w-md w-full p-6 relative shadow-lg"
        id="editModalContent"
      >
        <button
          onclick="closeEditModal()"
          class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl"
        >
          ×
        </button>
        <h3 class="text-xl font-semibold mb-4">Edit Product</h3>
        <form id="editForm">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >German Name:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editGermanName"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Turkish Name:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editTurkishName"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Unit Price:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editUnitPrice"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Savings:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editSaving"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Package Size:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editPackageSize"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Old Price:</label
            >
            <input
              type="number"
              step="0.01"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editOldPrice"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >New Price:</label
            >
            <input
              type="number"
              step="0.01"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editNewPrice"
            />
          </div>
          <div class="flex justify-end gap-4">
            <button
              type="button"
              class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
              onclick="closeEditModal()"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
              id="saveEditButton"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Product Selection Modal (unchanged) -->
    <div
      id="productModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg max-w-lg w-full p-6 relative">
        <button
          onclick="closeProductList()"
          class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl"
        >
          ×
        </button>
        <h3 class="text-xl font-semibold mb-4">Select a Product</h3>
        <ul id="productList" class="space-y-3 max-h-80 overflow-y-auto"></ul>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js"></script>
    <script src="https://unpkg.com/jwt-decode@3.1.2/build/jwt-decode.js"></script>

    <script>
      let products = [];
      let currentBox = null;
      const selectedProducts = {};
      const editingState = {};

      // Store date properties at global scope
      let dateProperties = {
        text: new Date().toLocaleString("en-US", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "numeric",
          minute: "numeric",
        }),
        color: "#ffffff",
        fontSize: "14",
        isEditing: false,
      };

      // Store custom text properties
      let customTextProperties = {
        text: "Custom Text",
        color: "#ffffff",
        fontSize: "16",
        isEditing: false,
      };

      const gridLayouts = {
        1: [[1]],
        2: [[1, 1], [2]],
        4: [[1, 3], [2, 2], [3, 1], [4]],
        9: [
          [3, 3, 3],
          [2, 3, 4],
          [4, 3, 2],
          [1, 4, 4],
        ],
      };

      // Function to fetch products from API
      function fetchProducts() {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) {
          console.error("No authToken found. Please log in.");
          return;
        }
        const proxyUrl = "https://marketim.de/proxy/image?url=";

        $.ajax({
          url: "https://api.marketim.app/admin/products",
          type: "GET",
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
          success: function (response) {
            products = response.map((product) => ({
              id: product._id,
              nameTr: product.title.tr,
              nameDe: product.title.de,
              oldPrice: parseFloat(product.base_price.replace(",", ".")) || 0,
              newPrice: parseFloat(product.base_price.replace(",", ".")) || 0,
              unitPrice: "1kg = " + product.unit_price,
              saving: "0,-",
              packageSize: `${product.weight.unit_vol} ${product.weight.unit_type} ${product.package_type}`,
              image:
                product.images.length > 0
                  ? `${proxyUrl}https://api.marketim.app/uploads/${product.images[0]}`
                  : "./public/images/dummy3.jpg",
              logo: product.thumbnail
                ? `${proxyUrl}https://api.marketim.app/uploads/${product.thumbnail}`
                : "./public/images/dummy2.jpg",
              isHalal: product.isHalal,
            }));
            updateGridLayout();
          },
          error: function (xhr) {
            console.error("Error fetching products:", xhr.responseText);
            products = [];
          },
        });
      }

      function setTemplateFromQueryParam() {
        const urlParams = new URLSearchParams(window.location.search);
        const templateParam = urlParams.get("template");
        const templateSelect = document.getElementById("templateSelect");
        const validTemplates = ["1", "2", "4", "9"];

        if (templateParam && validTemplates.includes(templateParam)) {
          templateSelect.value = templateParam;
        }
        updateGridLayoutOptions();
      }

      function updateGridLayoutOptions() {
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        gridLayoutSelect.innerHTML = "";

        const layouts = gridLayouts[templateSize] || [[templateSize]];
        layouts.forEach((layout, index) => {
          const option = document.createElement("option");
          option.value = layout.join(",");
          option.textContent = layout.join(":");
          gridLayoutSelect.appendChild(option);
        });

        updateGridLayout();
      }

      function updateBackgroundColor() {
        const backgroundColorPicker = document.getElementById(
          "backgroundColorPicker"
        );
        const templateGrid = document.getElementById("templateGrid");
        const templateGridContainer = document.getElementById(
          "templateGridContainer"
        );
        const selectedColor = backgroundColorPicker.value;
        templateGrid.style.setProperty("--bg-color", selectedColor);
        templateGridContainer.style.setProperty("--bg-color", selectedColor);
      }

      function updateGridLayout() {
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        const selectedLayout = gridLayoutSelect.value
          ? gridLayoutSelect.value.split(",").map(Number)
          : gridLayouts[templateSize][0];

        const totalProducts = selectedLayout.reduce((sum, num) => sum + num, 0);
        if (totalProducts !== templateSize) {
          console.error(
            "Invalid grid layout: total products do not match template size"
          );
          return;
        }

        const templateGrid = document.getElementById("templateGrid");
        templateGrid.innerHTML = "";

        fetchUserProfile(function (companyLogo, coverImage) {
          // Header
          const headerItem = document.createElement("div");
          headerItem.className = "grid-item";
          headerItem.innerHTML = `
            <div class="header-wrapper">
              <header class="bg-white w-full rounded-lg shadow-md relative h-60 overflow-hidden"
                style="background-image: url('${coverImage}'); background-size: cover; background-position: center;">
                <div class="absolute inset-0 bg-black bg-opacity-40"></div>
                <div class="relative z-10 flex items-center justify-between h-full p-4">
                  <div class="flex-shrink-0">
                    <img src="${companyLogo}" alt="Logo" class="h-20 w-20 rounded-full object-cover" />
                  </div>
                  <div class="flex-shrink-0 text-right flex flex-col items-end gap-2">
                    <!-- Date Display -->
                    <div class="${
                      dateProperties.isEditing ? "hidden" : ""
                    } flex items-center gap-2">
                      <p
                        class="font-medium text-white"
                        id="currentDate"
                        style="color: ${dateProperties.color}; font-size: ${
            dateProperties.fontSize
          }px;"
                      >
                        ${dateProperties.text}
                      </p>
                      <button
                        onclick="toggleDateEditing()"
                        class="text-white hover:text-gray-300 text-sm"
                        title="Edit Date"
                      >
                        ✎
                      </button>
                    </div>
                    <!-- Date Editing Controls -->
                    <div class="${
                      dateProperties.isEditing ? "" : "hidden"
                    } flex flex-col items-end gap-2">
                      <input
                        type="text"
                        id="currentDateInput"
                        class="font-medium text-white bg-transparent border border-white rounded px-2 py-1 w-64 text-sm"
                        style="color: ${dateProperties.color}; font-size: ${
            dateProperties.fontSize
          }px;"
                        value="${dateProperties.text}"
                        oninput="updateDateText(this.value)"
                      />
                      <div class="flex items-center gap-2">
                        <label class="text-sm font-medium text-white">Color:</label>
                        <input
                          type="color"
                          id="dateColorPicker"
                          value="${dateProperties.color}"
                          class="h-8 w-8 bg-transparent border-none"
                          onchange="updateDateColor(this.value)"
                        />
                      </div>
                      <div class="flex items-center gap-2">
                        <label class="text-sm font-medium text-white">Font Size (px):</label>
                        <input
                          type="number"
                          id="dateFontSize"
                          value="${dateProperties.fontSize}"
                          min="8"
                          max="40"
                          class="w-16 bg-transparent border border-white rounded px-2 py-1 text-sm text-white"
                          onchange="updateDateFontSize(this.value)"
                        />
                      </div>
                      <button
                        onclick="saveDateChanges()"
                        class="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"
                      >
                        Save
                      </button>
                    </div>
                  </div>
                </div>
              </header>
            </div>
          `;
          templateGrid.appendChild(headerItem);

          // Custom Text Above Products
          const customTextItem = document.createElement("div");
          customTextItem.className =
            "grid-item flex justify-center items-center py-2";
          customTextItem.innerHTML = `
            <div class="${
              customTextProperties.isEditing ? "hidden" : ""
            } flex items-center gap-2">
              <p
                class="font-medium"
                id="customText"
                style="color: ${customTextProperties.color}; font-size: ${
            customTextProperties.fontSize
          }px;"
              >
                ${customTextProperties.text}
              </p>
              <button
                onclick="toggleCustomTextEditing()"
                class="text-white hover:text-gray-300 text-sm"
                title="Edit Custom Text"
              >
                ✎
              </button>
            </div>
            <div class="${
              customTextProperties.isEditing ? "" : "hidden"
            } flex flex-col items-center gap-2">
              <input
                type="text"
                id="customTextInput"
                class="font-medium bg-transparent border border-gray-300 rounded px-2 py-1 w-64 text-sm"
                style="color: ${customTextProperties.color}; font-size: ${
            customTextProperties.fontSize
          }px;"
                value="${customTextProperties.text}"
                oninput="updateCustomText(this.value)"
              />
              <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-white">Color:</label>
                <input
                  type="color"
                  id="customTextColorPicker"
                  value="${customTextProperties.color}"
                  class="h-8 w-8 bg-transparent border-none"
                  onchange="updateCustomTextColor(this.value)"
                />
              </div>
              <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-white">Font Size (px):</label>
                <input
                  type="number"
                  id="customTextFontSize"
                  value="${customTextProperties.fontSize}"
                  min="8"
                  max="40"
                  class="w-16 bg-transparent border border-gray-300 rounded px-2 py-1 text-sm text-white"
                  onchange="updateCustomTextFontSize(this.value)"
                />
              </div>
              <button
                onclick="saveCustomTextChanges()"
                class="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"
              >
                Save
              </button>
            </div>
          `;
          templateGrid.appendChild(customTextItem);

          // Product Rows
          let currentBoxNumber = 1;
          selectedLayout.forEach((colsInRow) => {
            if (colsInRow === 0) return;
            const row = document.createElement("div");
            row.className = `grid gap-4 w-full grid-cols-${colsInRow}`;

            for (let i = 0; i < colsInRow; i++) {
              const boxNumber = currentBoxNumber;
              const box = document.createElement("div");
              box.className = "product-box-wrapper";
              box.setAttribute("data-box", boxNumber);
              box.setAttribute("draggable", "true");

              if (selectedProducts[boxNumber]) {
                const p = selectedProducts[boxNumber];
                box.innerHTML = `
                  <div class="label-container">
                    <img src="${
                      p.logo
                    }" alt="Produkt Logo" class="product-logo" />
                    <div class="product-names">
                      <div class="german-name">${p.nameDe}</div>
                      <div class="turkish-name">${p.nameTr}</div>
                    </div>
                    ${
                      p.isHalal
                        ? `<img src="./public/images/halal.png" alt="HALAL Logo" class="halal-logo" />`
                        : ""
                    }
                    <div class="unit-price">${p.unitPrice}</div>
                    <div class="savings-ribbon">SIE SPAREN</div>
                    <div class="savings-amount">${p.saving}</div>
                    <img src="${
                      p.image
                    }" alt="Produktfoto" class="product-image" />
                    <div class="pack-size">${p.packageSize}</div>
                    <div class="prices">
                      <div class="old-price">€${p.oldPrice.toFixed(2)}</div>
                      <div class="new-price">€${p.newPrice.toFixed(2)}</div>
                    </div>
                  </div>
                  <button onclick="editProduct(${boxNumber}); event.stopPropagation();" class="absolute top-2 right-2 action-btn edit-btn" title="Edit">✎</button>
                `;
              } else {
                box.innerHTML = `
                  <div class="product-box">
                    <div class="product-box-icon">📦</div>
                    <div class="product-box-text">Select Product ${boxNumber}</div>
                  </div>`;
              }

              row.appendChild(box);
              currentBoxNumber++;
            }

            const gridItem = document.createElement("div");
            gridItem.className = "grid-item";
            gridItem.appendChild(row);
            templateGrid.appendChild(gridItem);
          });

          addProductBoxDragListeners();
          addClickListeners();
        });
      }

      function toggleCustomTextEditing() {
        customTextProperties.isEditing = !customTextProperties.isEditing;
        updateGridLayout();
      }

      function updateCustomText(value) {
        customTextProperties.text = value;
        const textInput = document.getElementById("customTextInput");
        if (textInput) {
          textInput.style.color = customTextProperties.color;
          textInput.style.fontSize = `${customTextProperties.fontSize}px`;
        }
      }

      function updateCustomTextColor(value) {
        customTextProperties.color = value;
        const textInput = document.getElementById("customTextInput");
        if (textInput) {
          textInput.style.color = value;
        }
      }

      function updateCustomTextFontSize(value) {
        customTextProperties.fontSize = value;
        const textInput = document.getElementById("customTextInput");
        if (textInput) {
          textInput.style.fontSize = `${value}px`;
        }
      }

      function saveCustomTextChanges() {
        customTextProperties.isEditing = false;
        updateGridLayout();
      }

      function toggleDateEditing() {
        dateProperties.isEditing = !dateProperties.isEditing;
        updateGridLayout();
      }

      function updateDateText(value) {
        dateProperties.text = value;
        const dateInput = document.getElementById("currentDateInput");
        if (dateInput) {
          dateInput.style.color = dateProperties.color;
          dateInput.style.fontSize = `${dateProperties.fontSize}px`;
        }
      }

      function updateDateColor(value) {
        dateProperties.color = value;
        const dateInput = document.getElementById("currentDateInput");
        if (dateInput) {
          dateInput.style.color = value;
        }
      }

      function updateDateFontSize(value) {
        dateProperties.fontSize = value;
        const dateInput = document.getElementById("currentDateInput");
        if (dateInput) {
          dateInput.style.fontSize = `${value}px`;
        }
      }

      function saveDateChanges() {
        dateProperties.isEditing = false;
        updateGridLayout();
      }

      function fetchUserProfile(callback) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) {
          console.error("No authToken found. Please log in.");
          callback("./public/images/dummy2.jpg", "./public/images/dummy3.jpg");
          return;
        }

        const proxyUrl = "https://marketim.de/proxy/image?url=";

        $.ajax({
          url: "https://api.marketim.app/app/profile",
          type: "GET",
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
          success: function (response) {
            const { companyLogo, coverImage } = response.user;
            const baseUrl = "https://api.marketim.app/uploads/";
            callback(
              companyLogo
                ? `${proxyUrl}${baseUrl}${companyLogo}`
                : "./public/images/dummy2.jpg",
              coverImage
                ? `${proxyUrl}${baseUrl}${coverImage}`
                : "./public/images/dummy3.jpg"
            );
          },
          error: function (xhr) {
            console.error("Error fetching user profile:", xhr.responseText);
            callback(
              "./public/images/dummy2.jpg",
              "./public/images/dummy3.jpg"
            );
          },
        });
      }

      function getUserIdFromToken() {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) return null;
        try {
          const decoded = jwt_decode(authToken);
          return decoded.id; // Assuming the JWT payload has a user_id field
        } catch (error) {
          console.error("Error decoding JWT:", error);
          return null;
        }
      }

      function addProductBoxDragListeners() {
        const boxes = document.querySelectorAll(".product-box-wrapper");
        boxes.forEach((box) => {
          box.removeEventListener("dragstart", handleBoxDragStart);
          box.removeEventListener("dragend", handleBoxDragEnd);
          box.removeEventListener("dragover", handleBoxDragOver);
          box.removeEventListener("drop", handleBoxDrop);

          box.addEventListener("dragstart", handleBoxDragStart);
          box.addEventListener("dragend", handleBoxDragEnd);
          box.addEventListener("dragover", handleBoxDragOver);
          box.addEventListener("drop", handleBoxDrop);
        });
      }

      function handleBoxDragStart(e) {
        const box = e.currentTarget;
        box.classList.add("dragging");
        e.dataTransfer.setData("text/plain", box.getAttribute("data-box"));
      }

      function handleBoxDragEnd(e) {
        const box = e.currentTarget;
        box.classList.remove("dragging");
      }

      function handleBoxDragOver(e) {
        e.preventDefault();
      }

      function handleBoxDrop(e) {
        e.preventDefault();
        const draggedBoxNumber = e.dataTransfer.getData("text/plain");
        const targetBoxNumber = e.currentTarget.getAttribute("data-box");

        if (draggedBoxNumber === targetBoxNumber) return;

        const draggedProduct = selectedProducts[draggedBoxNumber];
        const targetProduct = selectedProducts[targetBoxNumber];
        const draggedEditingState = editingState[draggedBoxNumber];
        const targetEditingState = editingState[targetBoxNumber];

        if (draggedProduct || targetProduct) {
          selectedProducts[draggedBoxNumber] = targetProduct;
          selectedProducts[targetBoxNumber] = draggedProduct;
          editingState[draggedBoxNumber] = targetEditingState;
          editingState[targetBoxNumber] = draggedEditingState;
        }

        updateGridLayout();
      }

      function addClickListeners() {
        const boxes = document.querySelectorAll(".product-box-wrapper");
        boxes.forEach((box) => {
          box.removeEventListener("click", handleBoxClick);
          box.addEventListener("click", handleBoxClick);
        });
      }

      function handleBoxClick(e) {
        const box = e.currentTarget;
        const boxNumber = box.getAttribute("data-box");
        if (!selectedProducts[boxNumber] && !e.target.closest("button")) {
          openProductList(boxNumber);
        }
      }

      function editProduct(boxNumber) {
        const product = selectedProducts[boxNumber];
        if (product) {
          document.getElementById("editGermanName").value = product.nameDe;
          document.getElementById("editTurkishName").value = product.nameTr;
          document.getElementById("editUnitPrice").value = product.unitPrice;
          document.getElementById("editSaving").value = product.saving;
          document.getElementById("editPackageSize").value =
            product.packageSize;
          document.getElementById("editOldPrice").value = product.oldPrice;
          document.getElementById("editNewPrice").value = product.newPrice;

          document.getElementById("editModal").classList.remove("hidden");
          document.getElementById("saveEditButton").onclick = function (e) {
            e.preventDefault();
            saveProduct(boxNumber);
          };
        }
      }

      function saveProduct(boxNumber) {
        const updatedProduct = { ...selectedProducts[boxNumber] };
        updatedProduct.nameDe = document.getElementById("editGermanName").value;
        updatedProduct.nameTr =
          document.getElementById("editTurkishName").value;
        updatedProduct.unitPrice =
          document.getElementById("editUnitPrice").value;
        updatedProduct.saving = document.getElementById("editSaving").value;
        updatedProduct.packageSize =
          document.getElementById("editPackageSize").value;
        updatedProduct.oldPrice =
          parseFloat(document.getElementById("editOldPrice").value) ||
          updatedProduct.oldPrice;
        updatedProduct.newPrice =
          parseFloat(document.getElementById("editNewPrice").value) ||
          updatedProduct.newPrice;

        selectedProducts[boxNumber] = updatedProduct;
        closeEditModal();
        updateGridLayout();
      }

      function closeEditModal() {
        document.getElementById("editModal").classList.add("hidden");
        document.getElementById("editForm").reset();
      }

      function openProductList(boxNumber) {
        currentBox = boxNumber;
        const productList = document.getElementById("productList");
        productList.innerHTML = "";

        products.forEach((product) => {
          const li = document.createElement("li");
          li.className =
            "p-4 border border-transparent rounded-md hover:bg-purple-100 cursor-pointer flex items-center";
          li.innerHTML = `
            <img src="${product.image}" alt="${
            product.nameTr
          }" class="w-12 h-12 object-cover rounded-md">
            <div class="flex-1 pl-4">
              <div class="text-sm font-medium">${product.nameTr}</div>
              <div class="text-sm">€${product.newPrice.toFixed(2)}</div>
              <div class="text-xs text-gray-600 mt-1">${product.nameDe}</div>
              <div class="text-xs mt-1 text-green-600">Available</div>
            </div>
          `;
          li.onclick = () => selectProduct(product);
          productList.appendChild(li);
        });

        document.getElementById("productModal").classList.remove("hidden");
      }

      function closeProductList() {
        document.getElementById("productModal").classList.add("hidden");
        currentBox = null;
      }

      function selectProduct(product) {
        if (currentBox) {
          selectedProducts[currentBox] = product;
          updateGridLayout();
          closeProductList();
        }
      }

      function saveTemplate() {
        const { jsPDF } = window.jspdf;
        const node = document.getElementById("templateGridContainer");
        const backgroundColor =
          document
            .getElementById("templateGrid")
            .style.getPropertyValue("--bg-color") || "#e0f7fa";
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        const selectedLayout = gridLayoutSelect.value
          ? gridLayoutSelect.value.split(",").map(Number)
          : gridLayouts[templateSize][0];
        const userId = getUserIdFromToken();

        if (!userId) {
          Toastify({
            text: "Error: User not authenticated. Please log in.",
            duration: 3000,
            backgroundColor: "#ef4444",
          }).showToast();
          return;
        }

        const elementsToHide = document.querySelectorAll("h2, .mb-6, button");
        elementsToHide.forEach((el) => (el.style.display = "none"));

        node.style.width = "794px";

        domtoimage
          .toPng(node, {
            bgcolor: backgroundColor,
            width: 794,
            quality: 1,
          })
          .then(function (dataUrl) {
            const pdf = new jsPDF({
              orientation: "portrait",
              unit: "mm",
              format: "a4",
            });

            const a4Width = 210;
            const a4Height = 297;
            const imgProps = pdf.getImageProperties(dataUrl);
            const imgWidth = imgProps.width;
            const imgHeight = imgProps.height;

            pdf.setFillColor(backgroundColor);
            pdf.rect(0, 0, a4Width, a4Height, "F");

            const margin = 10;
            const maxWidth = a4Width - 2 * margin;
            const maxHeightPx = a4Height - 2 * margin;
            let pdfImgWidth = imgWidth * 0.264583;
            let pdfImgHeight = imgHeight * 0.264583;

            const aspectRatio = imgWidth / imgHeight;
            if (pdfImgWidth > maxWidth) {
              pdfImgWidth = maxWidth;
              pdfImgHeight = pdfImgWidth / aspectRatio;
            }
            if (pdfImgHeight > maxHeightPx) {
              pdfImgHeight = maxHeightPx;
              pdfImgWidth = pdfImgHeight * aspectRatio;
            }

            const xOffset = (a4Width - pdfImgWidth) / 2;
            const yOffset = margin;

            pdf.addImage(
              dataUrl,
              "PNG",
              xOffset,
              yOffset,
              pdfImgWidth,
              pdfImgHeight
            );

            // Convert PDF to Blob
            const pdfBlob = pdf.output("blob");

            // Convert image data URL to Blob
            const imageBlob = dataURLtoBlob(dataUrl);

            // Prepare FormData
            const formData = new FormData();
            formData.append("pdf", pdfBlob, `template-${Date.now()}.pdf`);
            formData.append("image", imageBlob, `template-${Date.now()}.png`);
            formData.append("template_size", templateSize);
            formData.append("grid_layout", JSON.stringify(selectedLayout));
            formData.append("background_color", backgroundColor);
            formData.append("date_properties", JSON.stringify(dateProperties));
            formData.append(
              "custom_text_properties",
              JSON.stringify(customTextProperties)
            );
            formData.append(
              "products",
              JSON.stringify(Object.values(selectedProducts))
            );

            // Send to API
            $.ajax({
              url: "https://api.marketim.app/app/template/save",
              type: "POST",
              headers: {
                Authorization: `Bearer ${localStorage.getItem("authToken")}`,
              },
              data: formData,
              processData: false,
              contentType: false,
              success: function (response) {
                const toastDuration = 3000; // 3 seconds
                Toastify({
                  text: "Template saved successfully!",
                  duration: toastDuration,
                  backgroundColor: "#10b981",
                }).showToast();

                // Redirect AFTER toast is hidden
                setTimeout(() => {
                  window.location.href = "/dashboard";
                }, toastDuration);
              },
              error: function (xhr) {
                Toastify({
                  text: "Failed to save template. Please try again.",
                  duration: 3000,
                  backgroundColor: "#ef4444",
                }).showToast();
              },
              complete: () => {
                elementsToHide.forEach((e) => (e.style.display = ""));
                node.style.width = "";
              },
            });
          })
          .catch(function (error) {
            console.error("DOM-to-image error:", error);
            Toastify({
              text: "Error generating template. Please try again.",
              duration: 3000,
              backgroundColor: "#ef4444",
            }).showToast();
            elementsToHide.forEach((e) => (e.style.display = ""));
            node.style.width = "";
          });
      }

      // Helper function to convert data URL to Blob
      function dataURLtoBlob(dataUrl) {
        const arr = dataUrl.split(",");
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n);
        }
        return new Blob([u8arr], { type: mime });
      }

      $(document).ready(function () {
        setTemplateFromQueryParam();
        fetchProducts();
        updateBackgroundColor();
      });
    </script>
  </body>
</html>
