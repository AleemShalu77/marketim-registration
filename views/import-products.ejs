<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Template Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="../public/style/import-products.css" />
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />
  </head>
  <body class="min-h-screen flex p-6">
    <div
      class="sidebar fixed left-0 top-0 h-screen w-72 bg-gradient-to-br from-blue-600 to-indigo-700 text-white p-6 shadow-lg transform transition-transform duration-300 ease-in-out z-50"
      id="sidebar"
    >
      <div class="flex justify-between items-center mb-6">
        <!-- <h2 class="text-2xl font-bold text-center">Template Tools</h2> -->
        <button
          onclick="toggleSidebar()"
          class="text-white hover:text-gray-300 text-xl focus:outline-none"
          id="sidebarToggle"
          title="Toggle Sidebar"
        >
          ☰
        </button>
      </div>
      <div class="space-y-4" id="sidebarContent">
        <div class="control-group">
          <a
            href="/dashboard"
            class="block w-full p-2 rounded-lg bg-white text-gray-800 text-center font-medium hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-400"
          >
            Dashboard
          </a>
        </div>
        <div class="control-group">
          <label for="templateSelect" class="block text-sm font-medium mb-2"
            >Select Template:</label
          >
          <select
            id="templateSelect"
            class="control-select w-full p-2 rounded-lg bg-white text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400"
            oninput="updateGridLayoutOptions()"
          >
            <option value="1">1 Product</option>
            <option value="2">2 Products</option>
            <option value="4">4 Products</option>
            <option value="9">9 Products</option>
          </select>
        </div>
        <div class="control-group">
          <label for="gridLayoutSelect" class="block text-sm font-medium mb-2"
            >Grid Layout:</label
          >
          <select
            id="gridLayoutSelect"
            class="control-select w-full p-2 rounded-lg bg-white text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400"
            oninput="updateGridLayout()"
          >
            <!-- Options will be populated dynamically -->
          </select>
        </div>
        <div class="color-picker-container">
          <label
            for="backgroundColorPicker"
            class="block text-sm font-medium mb-2"
            >Background Color:</label
          >
          <input
            type="color"
            id="backgroundColorPicker"
            value="#e0f7fa"
            class="w-full h-10 rounded-lg cursor-pointer border-2 border-white"
            onchange="updateBackgroundColor()"
          />
        </div>
        <div class="control-group">
          <label for="paperSizeSelect" class="block text-sm font-medium mb-2"
            >Paper Size:</label
          >
          <select
            id="paperSizeSelect"
            class="control-select w-full p-2 rounded-lg bg-white text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400"
          >
            <option value="a4">A4 (210 x 297 mm)</option>
            <option value="a3">A3 (297 x 420 mm)</option>
            <option value="a2">A2 (420 x 594 mm)</option>
          </select>
        </div>
      </div>
    </div>
    <div id="templateGridContainer" class="ml-72 w-full">
      <div id="templateGrid"></div>
    </div>

    <button
      onclick="saveTemplate()"
      class="download-btn fixed bottom-6 right-6 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 z-40"
    >
      Save Template
    </button>

    <!-- Edit Product Modal -->
    <div
      id="editModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50"
    >
      <div
        class="bg-white rounded-lg max-w-md w-full p-6 relative shadow-lg"
        id="editModalContent"
      >
        <button
          onclick="closeEditModal()"
          class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl"
        >
          ×
        </button>
        <h3 class="text-xl font-semibold mb-4">Edit Product</h3>
        <form id="editForm">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >German Name:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editGermanName"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Turkish Name:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editTurkishName"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Unit Price:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editUnitPrice"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Savings:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editSaving"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Package Size:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editPackageSize"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Old Price:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editOldPrice"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >New Price:</label
            >
            <input
              type="text"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editNewPrice"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Background Color:</label
            >
            <input
              type="color"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editBgColor"
            />
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700"
              >Border Color:</label
            >
            <input
              type="color"
              class="editable-input w-full mt-1 p-2 border rounded"
              id="editBorderColor"
            />
          </div>
          <div class="flex justify-end gap-4">
            <button
              type="button"
              class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
              onclick="closeEditModal()"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
              id="saveEditButton"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Product Selection Modal -->
    <div
      id="productModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg max-w-lg w-full p-6 relative">
        <button
          onclick="closeProductList()"
          class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl"
        >
          ×
        </button>
        <h3 class="text-xl font-semibold mb-4">Select a Product</h3>
        <ul id="productList" class="space-y-3 max-h-80 overflow-y-auto"></ul>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js"></script>
    <script src="https://unpkg.com/jwt-decode@3.1.2/build/jwt-decode.js"></script>

    <script>
      let products = [];
      let currentBox = null;
      const selectedProducts = {};
      const editingState = {};

      // Store date properties at global scope
      let dateProperties = {
        text: "Monday, July 28, 2025, 04:26 PM IST",
        color: "#ffffff",
        fontSize: "14",
        isEditing: false,
      };

      // Store custom text properties
      let customTextProperties = {
        text: "Custom Text",
        color: "#ffffff",
        fontSize: "16",
        isEditing: false,
      };

      const gridLayouts = {
        1: [[1]],
        2: [[1, 1], [2]],
        4: [[1, 3], [2, 2], [3, 1], [4]],
        9: [
          [3, 3, 3],
          [2, 3, 4],
          [4, 3, 2],
          [1, 4, 4],
        ],
      };

      // Function to determine if a color is dark (luminance-based)
      function isDarkColor(hexColor) {
        const rgb = hexToRgb(hexColor);
        const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
        return luminance < 0.5;
      }

      // Convert hex to RGB
      function hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
          ? {
              r: parseInt(result[1], 16),
              g: parseInt(result[2], 16),
              b: parseInt(result[3], 16),
            }
          : { r: 0, g: 0, b: 0 };
      }

      // Initialize header and custom text sections
      function initializeHeaderAndCustomText() {
        const templateGrid = document.getElementById("templateGrid");
        const bgColor =
          templateGrid.style.getPropertyValue("--bg-color") || "#e0f7fa";

        fetchUserProfile(function (companyLogo, coverImage) {
          // Remove existing header and custom text to avoid duplicates
          const existingHeader = templateGrid.querySelector(".header-wrapper");
          const existingCustomText =
            templateGrid.querySelector(".custom-text-item");
          if (existingHeader) existingHeader.remove();
          if (existingCustomText) existingCustomText.remove();

          // Create header
          const headerItem = document.createElement("div");
          headerItem.className = "grid-item";
          headerItem.innerHTML = `
            <div class="header-wrapper">
                <header class="bg-white w-full rounded-lg shadow-md relative h-60 overflow-hidden"
                    style="background-image: url('${coverImage}'); background-size: cover; background-position: center;">
                    <div class="absolute inset-0 bg-black bg-opacity-40"></div>
                    <div class="relative z-10 flex items-center justify-between h-full p-4">
                        <div class="flex-shrink-0">
                            <img src="${companyLogo}" alt="Logo" class="h-20 w-20 rounded-full object-cover" />
                        </div>
                        <div class="flex-shrink-0 text-right flex flex-col items-end gap-2">
                            <!-- Date Display -->
                            <div class="${
                              dateProperties.isEditing ? "hidden" : ""
                            } flex items-center gap-2">
                                <p class="font-medium text-white" id="currentDate" style="color: ${
                                  dateProperties.color
                                }; font-size: ${dateProperties.fontSize}px;">
                                    ${dateProperties.text}
                                </p>
                                <button onclick="toggleDateEditing()" class="text-white hover:text-gray-300 text-sm" title="Edit Date">✎</button>
                            </div>
                            <!-- Date Editing Controls -->
                            <div class="${
                              dateProperties.isEditing ? "" : "hidden"
                            } flex flex-col items-end gap-2">
                                <input type="text" id="currentDateInput" class="font-medium text-white bg-transparent border border-white rounded px-2 py-1 w-64 text-sm"
                                    style="color: ${
                                      dateProperties.color
                                    }; font-size: ${
            dateProperties.fontSize
          }px;" value="${dateProperties.text}"
                                    oninput="updateDateText(this.value)" />
                                <div class="flex items-center gap-2">
                                    <label class="text-sm font-medium text-white">Color:</label>
                                    <input type="color" id="dateColorPicker" value="${
                                      dateProperties.color
                                    }" class="h-8 w-8 bg-transparent border-none"
                                        onchange="updateDateColor(this.value)" />
                                </div>
                                <div class="flex items-center gap-2">
                                    <label class="text-sm font-medium text-white">Font Size (px):</label>
                                    <input type="number" id="dateFontSize" value="${
                                      dateProperties.fontSize
                                    }" min="8" max="40"
                                        class="w-16 bg-transparent border border-white rounded px-2 py-1 text-sm text-white"
                                        onchange="updateDateFontSize(this.value)" />
                                </div>
                                <button onclick="saveDateChanges()" class="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">Save</button>
                            </div>
                        </div>
                    </div>
                </header>
            </div>
        `;
          templateGrid.prepend(headerItem); // Prepend to ensure header is at the top

          // Create custom text
          const customTextItem = document.createElement("div");
          customTextItem.className =
            "grid-item custom-text-item flex justify-center items-center py-2 mb-0";
          customTextItem.innerHTML = `
            <div class="${
              customTextProperties.isEditing ? "hidden" : ""
            } flex items-center gap-2">
                <p class="font-medium" id="customText" style="color: ${
                  customTextProperties.color
                }; font-size: ${customTextProperties.fontSize}px;">
                    ${customTextProperties.text}
                </p>
                <button onclick="toggleCustomTextEditing()" class="custom-text-edit-btn text-white hover:text-gray-300 text-sm"
                    title="Edit Custom Text" style="color: ${
                      customTextProperties.color
                    };">✎</button>
            </div>
            <div class="${
              customTextProperties.isEditing ? "" : "hidden"
            } flex flex-col items-center gap-2">
                <input type="text" id="customTextInput" class="font-medium bg-transparent border border-white rounded px-2 py-1 w-64 text-sm"
                    style="color: ${customTextProperties.color}; font-size: ${
            customTextProperties.fontSize
          }px;" value="${customTextProperties.text}"
                    oninput="updateCustomText(this.value)" />
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-white">Color:</label>
                    <input type="color" id="customTextColorPicker" value="${
                      customTextProperties.color
                    }" class="h-8 w-8 bg-transparent border-none"
                        onchange="updateCustomTextColor(this.value)" />
                </div>
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-white">Font Size (px):</label>
                    <input type="number" id="customTextFontSize" value="${
                      customTextProperties.fontSize
                    }" min="8" max="40"
                        class="w-16 bg-transparent border border-gray-300 rounded px-2 py-1 text-sm text-white"
                        onchange="updateCustomTextFontSize(this.value)" />
                </div>
                <button onclick="saveCustomTextChanges()" class="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">Save</button>
            </div>
        `;
          templateGrid.insertBefore(customTextItem, headerItem.nextSibling); // Insert after header
        });
      }

      // Function to fetch products from API
      function fetchProducts() {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) {
          console.error("No authToken found. Please log in.");
          return;
        }
        const proxyUrl = "https://marketim.de/proxy/image?url=";

        $.ajax({
          url: "https://api.marketim.app/admin/products",
          type: "GET",
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
          success: function (response) {
            products = response.map((product) => ({
              id: product._id,
              nameTr: product.title.tr,
              nameDe: product.title.de,
              oldPrice: parseFloat(product.base_price.replace(",", ".")) || 0,
              newPrice: parseFloat(product.base_price.replace(",", ".")) || 0,
              unitPrice: "1kg = " + product.unit_price,
              saving: "0,-",
              packageSize: `${product.weight.unit_vol} ${product.weight.unit_type} ${product.package_type}`,
              image:
                product.images.length > 0
                  ? `${proxyUrl}https://api.marketim.app/uploads/${product.images[0]}`
                  : "./public/images/dummy3.jpg",
              logo: product.thumbnail
                ? `${proxyUrl}https://api.marketim.app/uploads/${product.thumbnail}`
                : "./public/images/dummy2.jpg",
              isHalal: product.isHalal,
              bgColor: "#ffffff",
              borderColor: "#e5e7eb",
            }));
            updateBackgroundColor();
          },
          error: function (xhr) {
            console.error("Error fetching products:", xhr.responseText);
            products = [];
            updateGridLayout();
          },
        });
      }
      function setTemplateFromQueryParam() {
        const urlParams = new URLSearchParams(window.location.search);
        const templateParam = urlParams.get("template");
        const templateSelect = document.getElementById("templateSelect");
        const validTemplates = ["1", "2", "4", "9"];

        if (templateParam && validTemplates.includes(templateParam)) {
          templateSelect.value = templateParam;
        }
        updateGridLayoutOptions();
      }

      function updateGridLayoutOptions() {
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        gridLayoutSelect.innerHTML = "";

        const layouts = gridLayouts[templateSize] || [[templateSize]];
        layouts.forEach((layout, index) => {
          const option = document.createElement("option");
          option.value = layout.join(",");
          option.textContent = layout.join(":");
          gridLayoutSelect.appendChild(option);
        });

        // Clear only product rows, keep header and custom text
        const templateGrid = document.getElementById("templateGrid");
        const productRows = templateGrid.querySelectorAll(".grid-item.grid");
        productRows.forEach((row) => row.remove());

        // Reinitialize header and custom text to ensure they're at the top
        initializeHeaderAndCustomText();
        updateGridLayout();
      }

      function updateBackgroundColor() {
        const backgroundColorPicker = document.getElementById(
          "backgroundColorPicker"
        );
        const templateGrid = document.getElementById("templateGrid");
        const templateGridContainer = document.getElementById(
          "templateGridContainer"
        );
        const selectedColor = backgroundColorPicker.value;

        // Update background color
        templateGrid.style.setProperty("--bg-color", selectedColor);
        templateGridContainer.style.setProperty("--bg-color", selectedColor);

        // Update custom text and pencil color based on background color
        const isDarkBg = isDarkColor(selectedColor);
        customTextProperties.color = isDarkBg ? "#ffffff" : "#000000";
        const customText = document.getElementById("customText");
        const customTextInput = document.getElementById("customTextInput");
        const editButtons = document.querySelectorAll(".custom-text-edit-btn");
        if (customText) {
          customText.style.color = customTextProperties.color;
          customText.style.fontSize = `${customTextProperties.fontSize}px`;
        }
        if (customTextInput) {
          customTextInput.style.color = customTextProperties.color;
          customTextInput.style.fontSize = `${customTextProperties.fontSize}px`;
        }
        editButtons.forEach((btn) => {
          btn.style.color = customTextProperties.color;
        });

        // Update date color
        const currentDate = document.getElementById("currentDate");
        const currentDateInput = document.getElementById("currentDateInput");
        if (currentDate) {
          currentDate.style.color = dateProperties.color;
          currentDate.style.fontSize = `${dateProperties.fontSize}px`;
        }
        if (currentDateInput) {
          currentDateInput.style.color = dateProperties.color;
          currentDateInput.style.fontSize = `${dateProperties.fontSize}px`;
        }

        // Only update product grid if products are loaded
        if (
          Object.keys(selectedProducts).length > 0 ||
          templateGrid.querySelector(".product-box-wrapper")
        ) {
          updateGridLayout();
        }
      }

      function updateGridLayout() {
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        const selectedLayout = gridLayoutSelect.value
          ? gridLayoutSelect.value.split(",").map(Number)
          : gridLayouts[templateSize][0];

        const totalProducts = selectedLayout.reduce((sum, num) => sum + num, 0);
        if (totalProducts !== templateSize) {
          console.error(
            "Invalid grid layout: total products do not match template size"
          );
          return;
        }

        const templateGrid = document.getElementById("templateGrid");
        const bgColor =
          templateGrid.style.getPropertyValue("--bg-color") || "#e0f7fa";
        const isDarkBg = isDarkColor(bgColor);

        // Clear only product rows
        const productRows = templateGrid.querySelectorAll(".grid-item.grid");
        productRows.forEach((row) => row.remove());

        // Update product rows
        let currentBoxNumber = 1;
        selectedLayout.forEach((rowLayout) => {
          if (!Array.isArray(rowLayout)) {
            rowLayout = Array(rowLayout).fill(1);
          }
          const totalCols = rowLayout.reduce((sum, span) => sum + span, 0);
          const row = document.createElement("div");
          row.className = `grid-item grid gap-4 w-full grid-cols-${totalCols}`;

          rowLayout.forEach((colSpan) => {
            const boxNumber = currentBoxNumber++;
            const box = document.createElement("div");
            box.className = "product-box-wrapper";
            box.setAttribute("data-box", boxNumber);
            box.setAttribute("draggable", "true");
            box.style.gridColumn = `span ${colSpan}`;

            const defaultBgColor = isDarkBg ? "#ffffff" : "#f9fafb";
            const defaultBorderColor = isDarkBg ? "#e5e7eb" : "#d1d5db";

            if (selectedProducts[boxNumber]) {
              const p = selectedProducts[boxNumber];
              box.innerHTML = `
                    <div class="label-container" style="background-color: ${
                      p.bgColor || defaultBgColor
                    }; border: 2px solid ${
                p.borderColor || defaultBorderColor
              };">
                        <img src="${
                          p.logo
                        }" alt="Produkt Logo" class="product-logo" />
                        <div class="product-names">
                            <div class="german-name">${p.nameDe}</div>
                            <div class="turkish-name">${p.nameTr}</div>
                        </div>
                        ${
                          p.isHalal
                            ? `<img src="./public/images/halal.png" alt="HALAL Logo" class="halal-logo" />`
                            : ""
                        }
                        <div class="unit-price">${p.unitPrice}</div>
                        <div class="savings-ribbon">SIE SPAREN</div>
                        <div class="savings-amount">${p.saving}</div>
                        <img src="${
                          p.image
                        }" alt="Produktfoto" class="product-image" />
                        <div class="pack-size">${p.packageSize}</div>
                        <div class="prices">
                            <div class="old-price">€${p.oldPrice
                              .toFixed(2)
                              .replace(".", ",")}</div>
                            <div class="new-price">€${p.newPrice
                              .toFixed(2)
                              .replace(".", ",")}</div>
                        </div>
                    </div>
                    <button onclick="editProduct(${boxNumber}); event.stopPropagation();" class="absolute top-2 right-2 action-btn edit-btn" title="Edit">✎</button>
                `;
            } else {
              box.innerHTML = `
                    <div class="product-box" style="background-color: ${defaultBgColor}; border: 2px solid ${defaultBorderColor};">
                        <div class="product-box-icon">📦</div>
                        <div class="product-box-text">Select Product ${boxNumber}</div>
                    </div>`;
            }

            row.appendChild(box);
          });

          templateGrid.appendChild(row);
        });

        addProductBoxDragListeners();
        addClickListeners();
      }

      function toggleCustomTextEditing() {
        customTextProperties.isEditing = !customTextProperties.isEditing;
        const customTextContainer = document.querySelector(
          ".custom-text-item > div:first-child"
        );
        const customTextEditContainer = document.querySelector(
          ".custom-text-item > div:last-child"
        );
        if (customTextContainer && customTextEditContainer) {
          customTextContainer.classList.toggle(
            "hidden",
            customTextProperties.isEditing
          );
          customTextEditContainer.classList.toggle(
            "hidden",
            !customTextProperties.isEditing
          );
        } else {
          console.error("Custom text containers not found");
        }
      }

      function updateCustomText(value) {
        customTextProperties.text = value;
        const customText = document.getElementById("customText");
        const customTextInput = document.getElementById("customTextInput");
        if (customText) {
          customText.textContent = value;
        }
        if (customTextInput) {
          customTextInput.value = value;
          customTextInput.style.color = customTextProperties.color;
          customTextInput.style.fontSize = `${customTextProperties.fontSize}px`;
        }
      }

      function updateCustomTextColor(value) {
        customTextProperties.color = value;
        const customText = document.getElementById("customText");
        const customTextInput = document.getElementById("customTextInput");
        const editButtons = document.querySelectorAll(".custom-text-edit-btn");
        if (customText) {
          customText.style.color = value;
        }
        if (customTextInput) {
          customTextInput.style.color = value;
        }
        editButtons.forEach((btn) => {
          btn.style.color = value;
        });
      }

      function updateCustomTextFontSize(value) {
        customTextProperties.fontSize = value;
        const customText = document.getElementById("customText");
        const customTextInput = document.getElementById("customTextInput");
        if (customText) {
          customText.style.fontSize = `${value}px`;
        }
        if (customTextInput) {
          customTextInput.style.fontSize = `${value}px`;
        }
      }

      function saveCustomTextChanges() {
        customTextProperties.isEditing = false;
        const customTextContainer = document.querySelector(
          ".custom-text-item > div:first-child"
        );
        const customTextEditContainer = document.querySelector(
          ".custom-text-item > div:last-child"
        );
        if (customTextContainer && customTextEditContainer) {
          customTextContainer.classList.remove("hidden");
          customTextEditContainer.classList.add("hidden");
        } else {
          console.error("Custom text containers not found");
        }
      }

      function toggleDateEditing() {
        dateProperties.isEditing = !dateProperties.isEditing;
        const dateContainer = document.querySelector(
          ".header-wrapper .relative .flex-shrink-0.text-right > div:first-child"
        );
        const dateEditContainer = document.querySelector(
          ".header-wrapper .relative .flex-shrink-0.text-right > div:last-child"
        );
        if (dateContainer && dateEditContainer) {
          dateContainer.classList.toggle("hidden", dateProperties.isEditing);
          dateEditContainer.classList.toggle(
            "hidden",
            !dateProperties.isEditing
          );
          // Fallback to ensure visibility
          dateContainer.style.display = dateProperties.isEditing
            ? "none"
            : "flex";
          dateEditContainer.style.display = dateProperties.isEditing
            ? "flex"
            : "none";
        } else {
          console.error("Date containers not found");
        }
      }

      function updateDateText(value) {
        dateProperties.text = value;
        const currentDate = document.getElementById("currentDate");
        const currentDateInput = document.getElementById("currentDateInput");
        if (currentDate) {
          currentDate.textContent = value;
        }
        if (currentDateInput) {
          currentDateInput.value = value;
          currentDateInput.style.color = dateProperties.color;
          currentDateInput.style.fontSize = `${dateProperties.fontSize}px`;
        }
      }

      function updateDateColor(value) {
        dateProperties.color = value;
        const currentDate = document.getElementById("currentDate");
        const currentDateInput = document.getElementById("currentDateInput");
        if (currentDate) {
          currentDate.style.color = value;
        }
        if (currentDateInput) {
          currentDateInput.style.color = value;
        }
      }

      function updateDateFontSize(value) {
        dateProperties.fontSize = value;
        const currentDate = document.getElementById("currentDate");
        const currentDateInput = document.getElementById("currentDateInput");
        if (currentDate) {
          currentDate.style.fontSize = `${value}px`;
        }
        if (currentDateInput) {
          currentDateInput.style.fontSize = `${value}px`;
        }
      }

      function saveDateChanges() {
        dateProperties.isEditing = false;
        const dateContainer = document.querySelector(
          ".header-wrapper .relative .flex-shrink-0.text-right > div:first-child"
        );
        const dateEditContainer = document.querySelector(
          ".header-wrapper .relative .flex-shrink-0.text-right > div:last-child"
        );
        if (dateContainer && dateEditContainer) {
          dateContainer.classList.remove("hidden");
          dateEditContainer.classList.add("hidden");
          // Fallback to ensure visibility
          dateContainer.style.display = "flex";
          dateEditContainer.style.display = "none";
        } else {
          console.error("Date containers not found");
        }
      }
      function fetchUserProfile(callback) {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) {
          console.error("No authToken found. Please log in.");
          callback("./public/images/dummy2.jpg", "./public/images/dummy3.jpg");
          return;
        }

        const proxyUrl = "https://marketim.de/proxy/image?url=";

        $.ajax({
          url: "https://api.marketim.app/app/profile",
          type: "GET",
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
          success: function (response) {
            const { companyLogo, coverImage } = response.user;
            const baseUrl = "https://api.marketim.app/uploads/";
            callback(
              companyLogo
                ? `${proxyUrl}${baseUrl}${companyLogo}`
                : "./public/images/dummy2.jpg",
              coverImage
                ? `${proxyUrl}${baseUrl}${coverImage}`
                : "./public/images/dummy3.jpg"
            );
          },
          error: function (xhr) {
            console.error("Error fetching user profile:", xhr.responseText);
            callback(
              "./public/images/dummy2.jpg",
              "./public/images/dummy3.jpg"
            );
          },
        });
      }

      function getUserIdFromToken() {
        const authToken = localStorage.getItem("authToken");
        if (!authToken) return null;
        try {
          const decoded = jwt_decode(authToken);
          return decoded.id;
        } catch (error) {
          console.error("Error decoding JWT:", error);
          return null;
        }
      }

      function addProductBoxDragListeners() {
        const boxes = document.querySelectorAll(".product-box-wrapper");
        boxes.forEach((box) => {
          box.removeEventListener("dragstart", handleBoxDragStart);
          box.removeEventListener("dragend", handleBoxDragEnd);
          box.removeEventListener("dragover", handleBoxDragOver);
          box.removeEventListener("drop", handleBoxDrop);

          box.addEventListener("dragstart", handleBoxDragStart);
          box.addEventListener("dragend", handleBoxDragEnd);
          box.addEventListener("dragover", handleBoxDragOver);
          box.addEventListener("drop", handleBoxDrop);
        });
      }

      function handleBoxDragStart(e) {
        const box = e.currentTarget;
        box.classList.add("dragging");
        e.dataTransfer.setData("text/plain", box.getAttribute("data-box"));
      }

      function handleBoxDragEnd(e) {
        e.currentTarget.classList.remove("dragging");
      }

      function handleBoxDragOver(e) {
        e.preventDefault();
      }

      function handleBoxDrop(e) {
        e.preventDefault();
        const draggedBoxNumber = e.dataTransfer.getData("text/plain");
        const targetBoxNumber = e.currentTarget.getAttribute("data-box");

        if (draggedBoxNumber === targetBoxNumber) return;

        const draggedProduct = selectedProducts[draggedBoxNumber];
        const targetProduct = selectedProducts[targetBoxNumber];
        const draggedEditingState = editingState[draggedBoxNumber];
        const targetEditingState = editingState[targetBoxNumber];

        if (draggedProduct || targetProduct) {
          selectedProducts[draggedBoxNumber] = targetProduct;
          selectedProducts[targetBoxNumber] = draggedProduct;
          editingState[draggedBoxNumber] = targetEditingState;
          editingState[targetBoxNumber] = draggedEditingState;
        }

        updateGridLayout();
      }

      function addClickListeners() {
        const boxes = document.querySelectorAll(".product-box-wrapper");
        boxes.forEach((box) => {
          box.removeEventListener("click", handleBoxClick);
          box.addEventListener("click", handleBoxClick);
        });
      }

      function handleBoxClick(e) {
        const box = e.currentTarget;
        const boxNumber = box.getAttribute("data-box");
        if (!selectedProducts[boxNumber] && !e.target.closest("button")) {
          openProductList(boxNumber);
        }
      }

      function editProduct(boxNumber) {
        const product = selectedProducts[boxNumber];
        if (product) {
          document.getElementById("editGermanName").value = product.nameDe;
          document.getElementById("editTurkishName").value = product.nameTr;
          document.getElementById("editUnitPrice").value = product.unitPrice;
          document.getElementById("editSaving").value = product.saving;
          document.getElementById("editPackageSize").value =
            product.packageSize;
          document.getElementById("editOldPrice").value = product.oldPrice
            .toFixed(2)
            .replace(".", ",");
          document.getElementById("editNewPrice").value = product.newPrice
            .toFixed(2)
            .replace(".", ",");
          document.getElementById("editBgColor").value =
            product.bgColor || "#ffffff";
          document.getElementById("editBorderColor").value =
            product.borderColor || "#e5e7eb";

          document.getElementById("editModal").classList.remove("hidden");
          document.getElementById("saveEditButton").onclick = function (e) {
            e.preventDefault();
            saveProduct(boxNumber);
          };
        }
      }

      function saveProduct(boxNumber) {
        const updatedProduct = { ...selectedProducts[boxNumber] };
        updatedProduct.nameDe = document.getElementById("editGermanName").value;
        updatedProduct.nameTr =
          document.getElementById("editTurkishName").value;
        updatedProduct.unitPrice =
          document.getElementById("editUnitPrice").value;
        updatedProduct.packageSize =
          document.getElementById("editPackageSize").value;
        updatedProduct.oldPrice =
          parseFloat(document.getElementById("editOldPrice").value) ||
          updatedProduct.oldPrice;
        updatedProduct.newPrice =
          parseFloat(document.getElementById("editNewPrice").value) ||
          updatedProduct.newPrice;
        updatedProduct.bgColor = document.getElementById("editBgColor").value;
        updatedProduct.borderColor =
          document.getElementById("editBorderColor").value;

        // Calculate savings as oldPrice - newPrice
        const savingsAmount = updatedProduct.oldPrice - updatedProduct.newPrice;
        updatedProduct.saving =
          savingsAmount >= 0 ? `${savingsAmount.toFixed(0)},-` : "0,-";

        selectedProducts[boxNumber] = updatedProduct;
        closeEditModal();
        updateGridLayout();
      }
      function closeEditModal() {
        document.getElementById("editModal").classList.add("hidden");
        document.getElementById("editForm").reset();
      }

      function openProductList(boxNumber) {
        currentBox = boxNumber;
        const productList = document.getElementById("productList");
        productList.innerHTML = "";

        products.forEach((product) => {
          const li = document.createElement("li");
          li.className =
            "p-4 border border-transparent rounded-md hover:bg-purple-100 cursor-pointer flex items-center";
          li.innerHTML = `
            <img src="${product.image}" alt="${
            product.nameTr
          }" class="w-12 h-12 object-cover rounded-md">
            <div class="flex-1 pl-4">
                <div class="text-sm font-medium">${product.nameTr}</div>
                <div>€${product.newPrice.toFixed(2).replace(".", ",")}</div>
                <div class="text-xs text-gray-600 mt-1">${product.nameDe}</div>
                <div class="text-xs mt-1 text-green-600">Available</div>
            </div>
        `;
          li.onclick = () => selectProduct(product);
          productList.appendChild(li);
        });

        document.getElementById("productModal").classList.remove("hidden");
      }

      function closeProductList() {
        document.getElementById("productModal").classList.add("hidden");
        currentBox = null;
      }

      function selectProduct(product) {
        if (currentBox) {
          selectedProducts[currentBox] = product;
          updateGridLayout();
          closeProductList();
        }
      }

      function saveTemplate() {
        const { jsPDF } = window.jspdf;
        const node = document.getElementById("templateGridContainer");
        const backgroundColor =
          document
            .getElementById("templateGrid")
            .style.getPropertyValue("--bg-color") || "#e0f7fa";
        const templateSize = parseInt(
          document.getElementById("templateSelect").value
        );
        const gridLayoutSelect = document.getElementById("gridLayoutSelect");
        const paperSizeSelect = document.getElementById("paperSizeSelect");
        const selectedLayout = gridLayoutSelect.value
          ? gridLayoutSelect.value.split(",").map(Number)
          : gridLayouts[templateSize][0];
        const userId = getUserIdFromToken();

        if (!userId) {
          Toastify({
            text: "Error: User not authenticated. Please log in.",
            duration: 3000,
            backgroundColor: "#ef4444",
          }).showToast();
          return;
        }

        // Check if all products are selected for the template
        const selectedProductCount = Object.keys(selectedProducts).length;
        if (selectedProductCount < templateSize) {
          Toastify({
            text: "Please select all products before submitting.",
            duration: 3000,
            backgroundColor: "#ef4444",
          }).showToast();
          return;
        }

        // Define paper sizes in mm
        const paperSizes = {
          a4: { width: 210, height: 297 },
          a3: { width: 297, height: 420 },
          a2: { width: 420, height: 594 },
        };
        const selectedPaperSize = paperSizeSelect.value || "a4";
        const { width: aWidth, height: aHeight } =
          paperSizes[selectedPaperSize];

        // Hide sidebar and other elements
        const elementsToHide = document.querySelectorAll(
          "h2, .mb-6, button, .sidebar"
        );
        elementsToHide.forEach((el) => (el.style.display = "none"));

        // Adjust templateGridContainer to account for sidebar removal
        node.style.width = `${aWidth * 3.779527559}px`; // Convert mm to px (1 mm = 3.779527559 px)
        node.style.marginLeft = "0";

        domtoimage
          .toPng(node, {
            bgcolor: backgroundColor,
            width: aWidth * 3.779527559,
            quality: 1,
          })
          .then(function (dataUrl) {
            const pdf = new jsPDF({
              orientation: "portrait",
              unit: "mm",
              format: selectedPaperSize,
            });

            const imgProps = pdf.getImageProperties(dataUrl);
            const imgWidth = imgProps.width;
            const imgHeight = imgProps.height;

            pdf.setFillColor(backgroundColor);
            pdf.rect(0, 0, aWidth, aHeight, "F");

            const margin = 10;
            const maxWidth = aWidth - 2 * margin;
            const maxHeightPx = aHeight - 2 * margin;
            let pdfImgWidth = imgWidth * 0.264583; // Convert px to mm (1 px = 0.264583 mm)
            let pdfImgHeight = imgHeight * 0.264583;

            const aspectRatio = imgWidth / imgHeight;
            if (pdfImgWidth > maxWidth) {
              pdfImgWidth = maxWidth;
              pdfImgHeight = pdfImgWidth / aspectRatio;
            }
            if (pdfImgHeight > maxHeightPx) {
              pdfImgHeight = maxHeightPx;
              pdfImgWidth = pdfImgHeight * aspectRatio;
            }

            const xOffset = (aWidth - pdfImgWidth) / 2;
            const yOffset = margin;

            pdf.addImage(
              dataUrl,
              "PNG",
              xOffset,
              yOffset,
              pdfImgWidth,
              pdfImgHeight
            );

            // Convert PDF to Blob
            const pdfBlob = pdf.output("blob");

            // Convert image data URL to Blob
            const imageBlob = dataURLtoBlob(dataUrl);

            // Prepare FormData
            const formData = new FormData();
            formData.append("pdf", pdfBlob, `template-${Date.now()}.pdf`);
            formData.append("image", imageBlob, `template-${Date.now()}.png`);
            formData.append("template_size", templateSize);
            formData.append("grid_layout", JSON.stringify(selectedLayout));
            formData.append("background_color", backgroundColor);
            formData.append("date_properties", JSON.stringify(dateProperties));
            formData.append(
              "custom_text_properties",
              JSON.stringify(customTextProperties)
            );
            formData.append(
              "products",
              JSON.stringify(Object.values(selectedProducts))
            );
            formData.append("paper_size", selectedPaperSize);

            // Send to API
            $.ajax({
              url: "https://api.marketim.app/app/template/save",
              type: "POST",
              headers: {
                Authorization: `Bearer ${localStorage.getItem("authToken")}`,
              },
              data: formData,
              processData: false,
              contentType: false,
              success: function (response) {
                const toastDuration = 3000;
                Toastify({
                  text: "Template saved successfully!",
                  duration: toastDuration,
                  backgroundColor: "#10b981",
                }).showToast();

                // Redirect after toast
                setTimeout(() => {
                  window.location.href = "/dashboard";
                }, toastDuration);
              },
              error: function (xhr) {
                Toastify({
                  text: "Failed to save template. Please try again.",
                  duration: 3000,
                  backgroundColor: "#ef4444",
                }).showToast();
              },
              complete: () => {
                // Restore hidden elements
                elementsToHide.forEach((e) => (e.style.display = ""));
                // Restore styles
                node.style.width = "";
                node.style.marginLeft = "";
              },
            });
          })
          .catch(function (error) {
            console.error("DOM-to-image error:", error);
            Toastify({
              text: "Error generating template. Please try again.",
              duration: 3000,
              backgroundColor: "#ef4444",
            }).showToast();
            // Restore hidden elements on error
            elementsToHide.forEach((e) => (e.style.display = ""));
            // Restore styles
            node.style.width = "";
            node.style.marginLeft = "";
          });
      }
      // Helper function to convert data URL to Blob
      function dataURLtoBlob(dataUrl) {
        const arr = dataUrl.split(",");
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n);
        }
        return new Blob([u8arr], { type: mime });
      }

      function toggleSidebar() {
        const sidebar = document.getElementById("sidebar");
        const sidebarContent = document.getElementById("sidebarContent");
        const sidebarToggle = document.getElementById("sidebarToggle");
        const templateGridContainer = document.getElementById(
          "templateGridContainer"
        );

        const isCollapsed = sidebar.classList.contains("collapsed");

        if (isCollapsed) {
          sidebar.classList.remove("collapsed", "w-16");
          sidebar.classList.add("w-72");
          sidebarContent.classList.remove("hidden");
          sidebarToggle.textContent = "☰";
          templateGridContainer.classList.remove("ml-16");
          templateGridContainer.classList.add("ml-72");
        } else {
          sidebar.classList.add("collapsed", "w-16");
          sidebar.classList.remove("w-72");
          sidebarContent.classList.add("hidden");
          sidebarToggle.textContent = "▶";
          templateGridContainer.classList.remove("ml-72");
          templateGridContainer.classList.add("ml-16");
        }
      }

      $(document).ready(function () {
        setTemplateFromQueryParam();
        initializeHeaderAndCustomText();
        fetchProducts();
      });
    </script>
  </body>
</html>
